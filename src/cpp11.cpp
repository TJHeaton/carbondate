// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// find_predictive_density.cpp
std::vector<double> FindPredictiveDensityWalker(doubles calendar_ages, doubles weight, doubles phi, doubles tau, double mu_phi, double lambda, double nu1, double nu2);
extern "C" SEXP _carbondate_FindPredictiveDensityWalker(SEXP calendar_ages, SEXP weight, SEXP phi, SEXP tau, SEXP mu_phi, SEXP lambda, SEXP nu1, SEXP nu2) {
  BEGIN_CPP11
    return cpp11::as_sexp(FindPredictiveDensityWalker(cpp11::as_cpp<cpp11::decay_t<doubles>>(calendar_ages), cpp11::as_cpp<cpp11::decay_t<doubles>>(weight), cpp11::as_cpp<cpp11::decay_t<doubles>>(phi), cpp11::as_cpp<cpp11::decay_t<doubles>>(tau), cpp11::as_cpp<cpp11::decay_t<double>>(mu_phi), cpp11::as_cpp<cpp11::decay_t<double>>(lambda), cpp11::as_cpp<cpp11::decay_t<double>>(nu1), cpp11::as_cpp<cpp11::decay_t<double>>(nu2)));
  END_CPP11
}
// find_predictive_density.cpp
std::vector<double> FindPredictiveDensityPolyaUrn(doubles calendar_ages, integers cluster_ids, doubles phi, doubles tau, double alpha, double mu_phi, double lambda, double nu1, double nu2);
extern "C" SEXP _carbondate_FindPredictiveDensityPolyaUrn(SEXP calendar_ages, SEXP cluster_ids, SEXP phi, SEXP tau, SEXP alpha, SEXP mu_phi, SEXP lambda, SEXP nu1, SEXP nu2) {
  BEGIN_CPP11
    return cpp11::as_sexp(FindPredictiveDensityPolyaUrn(cpp11::as_cpp<cpp11::decay_t<doubles>>(calendar_ages), cpp11::as_cpp<cpp11::decay_t<integers>>(cluster_ids), cpp11::as_cpp<cpp11::decay_t<doubles>>(phi), cpp11::as_cpp<cpp11::decay_t<doubles>>(tau), cpp11::as_cpp<cpp11::decay_t<double>>(alpha), cpp11::as_cpp<cpp11::decay_t<double>>(mu_phi), cpp11::as_cpp<cpp11::decay_t<double>>(lambda), cpp11::as_cpp<cpp11::decay_t<double>>(nu1), cpp11::as_cpp<cpp11::decay_t<double>>(nu2)));
  END_CPP11
}
// polya_urn_update_helpers.cpp
double PolyaUrnUpdateAlpha_test(int n, integers nci, double current_alpha, double alpha_shape, double alpha_rate);
extern "C" SEXP _carbondate_PolyaUrnUpdateAlpha_test(SEXP n, SEXP nci, SEXP current_alpha, SEXP alpha_shape, SEXP alpha_rate) {
  BEGIN_CPP11
    return cpp11::as_sexp(PolyaUrnUpdateAlpha_test(cpp11::as_cpp<cpp11::decay_t<int>>(n), cpp11::as_cpp<cpp11::decay_t<integers>>(nci), cpp11::as_cpp<cpp11::decay_t<double>>(current_alpha), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_shape), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_rate)));
  END_CPP11
}
// polya_urn_update_step.cpp
list PolyaUrnUpdateStep(doubles current_calendar_ages, integers current_cluster_ids, doubles current_phi, doubles current_tau, double current_alpha, double current_mu_phi, double alpha_shape, double alpha_rate, double lambda, double nu1, double nu2, double A, double B, double w, double m, doubles c14_determinations, doubles c14_sigmas, doubles mucalallyr, doubles sigcalallyr);
extern "C" SEXP _carbondate_PolyaUrnUpdateStep(SEXP current_calendar_ages, SEXP current_cluster_ids, SEXP current_phi, SEXP current_tau, SEXP current_alpha, SEXP current_mu_phi, SEXP alpha_shape, SEXP alpha_rate, SEXP lambda, SEXP nu1, SEXP nu2, SEXP A, SEXP B, SEXP w, SEXP m, SEXP c14_determinations, SEXP c14_sigmas, SEXP mucalallyr, SEXP sigcalallyr) {
  BEGIN_CPP11
    return cpp11::as_sexp(PolyaUrnUpdateStep(cpp11::as_cpp<cpp11::decay_t<doubles>>(current_calendar_ages), cpp11::as_cpp<cpp11::decay_t<integers>>(current_cluster_ids), cpp11::as_cpp<cpp11::decay_t<doubles>>(current_phi), cpp11::as_cpp<cpp11::decay_t<doubles>>(current_tau), cpp11::as_cpp<cpp11::decay_t<double>>(current_alpha), cpp11::as_cpp<cpp11::decay_t<double>>(current_mu_phi), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_shape), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_rate), cpp11::as_cpp<cpp11::decay_t<double>>(lambda), cpp11::as_cpp<cpp11::decay_t<double>>(nu1), cpp11::as_cpp<cpp11::decay_t<double>>(nu2), cpp11::as_cpp<cpp11::decay_t<double>>(A), cpp11::as_cpp<cpp11::decay_t<double>>(B), cpp11::as_cpp<cpp11::decay_t<double>>(w), cpp11::as_cpp<cpp11::decay_t<double>>(m), cpp11::as_cpp<cpp11::decay_t<doubles>>(c14_determinations), cpp11::as_cpp<cpp11::decay_t<doubles>>(c14_sigmas), cpp11::as_cpp<cpp11::decay_t<doubles>>(mucalallyr), cpp11::as_cpp<cpp11::decay_t<doubles>>(sigcalallyr)));
  END_CPP11
}
// walker_update_step.cpp
list WalkerUpdateStep(doubles current_calendar_ages, doubles current_weight, doubles current_v, integers current_cluster_ids, int current_n_clust, double current_alpha, double current_mu_phi, double alpha_shape, double alpha_rate, double lambda, double nu1, double nu2, double A, double B, double w, double m, doubles c14_determinations, doubles c14_sigmas, doubles mucalallyr, doubles sigcalallyr);
extern "C" SEXP _carbondate_WalkerUpdateStep(SEXP current_calendar_ages, SEXP current_weight, SEXP current_v, SEXP current_cluster_ids, SEXP current_n_clust, SEXP current_alpha, SEXP current_mu_phi, SEXP alpha_shape, SEXP alpha_rate, SEXP lambda, SEXP nu1, SEXP nu2, SEXP A, SEXP B, SEXP w, SEXP m, SEXP c14_determinations, SEXP c14_sigmas, SEXP mucalallyr, SEXP sigcalallyr) {
  BEGIN_CPP11
    return cpp11::as_sexp(WalkerUpdateStep(cpp11::as_cpp<cpp11::decay_t<doubles>>(current_calendar_ages), cpp11::as_cpp<cpp11::decay_t<doubles>>(current_weight), cpp11::as_cpp<cpp11::decay_t<doubles>>(current_v), cpp11::as_cpp<cpp11::decay_t<integers>>(current_cluster_ids), cpp11::as_cpp<cpp11::decay_t<int>>(current_n_clust), cpp11::as_cpp<cpp11::decay_t<double>>(current_alpha), cpp11::as_cpp<cpp11::decay_t<double>>(current_mu_phi), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_shape), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_rate), cpp11::as_cpp<cpp11::decay_t<double>>(lambda), cpp11::as_cpp<cpp11::decay_t<double>>(nu1), cpp11::as_cpp<cpp11::decay_t<double>>(nu2), cpp11::as_cpp<cpp11::decay_t<double>>(A), cpp11::as_cpp<cpp11::decay_t<double>>(B), cpp11::as_cpp<cpp11::decay_t<double>>(w), cpp11::as_cpp<cpp11::decay_t<double>>(m), cpp11::as_cpp<cpp11::decay_t<doubles>>(c14_determinations), cpp11::as_cpp<cpp11::decay_t<doubles>>(c14_sigmas), cpp11::as_cpp<cpp11::decay_t<doubles>>(mucalallyr), cpp11::as_cpp<cpp11::decay_t<doubles>>(sigcalallyr)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_carbondate_FindPredictiveDensityPolyaUrn", (DL_FUNC) &_carbondate_FindPredictiveDensityPolyaUrn,  9},
    {"_carbondate_FindPredictiveDensityWalker",   (DL_FUNC) &_carbondate_FindPredictiveDensityWalker,    8},
    {"_carbondate_PolyaUrnUpdateAlpha_test",      (DL_FUNC) &_carbondate_PolyaUrnUpdateAlpha_test,       5},
    {"_carbondate_PolyaUrnUpdateStep",            (DL_FUNC) &_carbondate_PolyaUrnUpdateStep,            19},
    {"_carbondate_WalkerUpdateStep",              (DL_FUNC) &_carbondate_WalkerUpdateStep,              20},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_carbondate(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
